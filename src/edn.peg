edn <- whitespace? (term:term whitespace?)* `
  case Node of
    %% Nothing but whitespace
    [ _, []] ->
          throw({edn,empty});
    %% Just one datum
    [ _, [[{term,Term}, _]]] ->
         Term;
    %% Lots of terms
    [ _, Terms ] ->
          [ T || [{term, T}, _WS] <- Terms ]
  end
`;

term <- tagged_element / element ~;

tagged_element <- tag whitespace? element
`
  [{tag, Sym}, _, Elem] = Node,
  {Sym, Elem}
`;

element <- character / keyword / string / boolean / nil / symbol ~;

character <- '\\' (special_char / !special_char .) `
case Node of
    [<<"\\">>, [[], Char]] -> {char, decode_char(Char)};
    [<<"\\">>, Special] -> {char, Special}
end`;

special_char <- "newline" / "space" / "tab" `
case Node of
    <<"newline">> -> $\n;
    <<"space">> -> $\s;
    <<"tab">> -> $\t
end
`;

keyword <- ':' symbol `
  [_, Sym] = Node,
  list_to_atom([$:|atom_to_list(Sym)])
`;

tag <- '#' symbol `{tag, hd(tl(Node))}`;

symbol <- '/' symbol_char* / (symbol_start ('/' symbol_char*)?) `
  binary_to_atom(?to_utf8(Node), utf8)
`;

symbol_start <- ([-.] non_numeric_with_punct / non_numeric) symbol_char* ~;

symbol_char <- [.$+!-_?#:A-Za-z0-9] ~;

non_numeric_with_punct <- [.$+!-_?#:A-Za-z] ~;

non_numeric <- [.$+!-_?A-Za-z] ~;

string <- '"' str:(!'"' ("\\\\" / '\\"' / .))*  '"' `
  unescape(?to_utf8(proplists:get_value(str, Node)))
`;

nil <- "nil" `'nil'`;

boolean <- "true" / "false" `binary_to_existing_atom(Node, utf8)`;

whitespace <- [,\s\v\f\r\n\t]+ `
%% Whitespace is ignored, so we use a sentinel value in its place
'$space'
`;

`
-include("edn.hrl").
-export([unescape/1]).

%% -----------------------
%% Utility functions
%% -----------------------
decode_char(<<C/utf8>>) ->
    C;
decode_char(I) when is_integer(I) ->
    I.

unescape(<<$\\,$", Rest/binary>>) ->
    <<$",(unescape(Rest))/binary>>;
unescape(<<$\\,C, Rest/binary>>) when C == $t ->
    <<9,(unescape(Rest))/binary>>;
unescape(<<$\\,C, Rest/binary>>) when C == $r ->
    <<13,(unescape(Rest))/binary>>;
unescape(<<$\\,C, Rest/binary>>) when C == $n ->
    <<10,(unescape(Rest))/binary>>;
unescape(<<C, Rest/binary>>) ->
    <<C, (unescape(Rest))/binary>>;
unescape(<<>>) ->
    <<>>.

`
